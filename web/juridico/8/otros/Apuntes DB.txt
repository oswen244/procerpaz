http://donnierock.com/html5-mobile-web/
Creando un VIEW (vista):
	CREATE VIEW vista AS SELECT id_user, COUNT(id_user) FROM compras GROUP BY id:user;

Creando un TRIGGER (disparador):
	CREATE TRIGGER nombre_disp momento_disp evento_disp ON nombre_tabla FOR EACH ROW sentencia_disp
			   |		|             |		   |		 |	       |
			trazador   BEFORE|AFTER	      |		 users	     cada vez          |
  					     INSERT|UPDATE|DELETE	   pueden ser varias dentro de BEGIN ... END

Creando un PROCEDURE O FUNCTION (procedimientos o funciones almacenados):
	delimiter $
	CREATE PROCEDURE crearUsuario (IN nombre INT, IN apellido VARCHAR(60))
	BEGIN
    		INSERT INTO users (name, lastname) VALUES(nombre, apellido);
    	END $

Crear un evento programado:
	Estructura:
		CREATE
		[DEFINER = { user | CURRENT_USER }]
		EVENT
		[IF NOT EXISTS]
		event_name
		ON SCHEDULE schedule
		[ON COMPLETION [NOT] PRESERVE]
		[ENABLE | DISABLE | DISABLE ON SLAVE]
		[COMMENT 'comment']
		DO sql_statement;
		 
		schedule:
		AT timestamp [+ INTERVAL interval] ...
		| EVERY interval
		[STARTS timestamp [+ INTERVAL interval] ...]
		[ENDS timestamp [+ INTERVAL interval] ...]
		 
		interval:
		quantity {YEAR | QUARTER | MONTH | DAY | HOUR | MINUTE |
		WEEK | SECOND | YEAR_MONTH | DAY_HOUR | DAY_MINUTE |
		DAY_SECOND | HOUR_MINUTE | HOUR_SECOND | MINUTE_SECOND}
	Ejemplos:
		CREATE EVENT e_ActualizaSaldoDiario			|	Funcion que actualiza el saldo
		ON SCHEDULE EVERY 1 DAY STARTS ‘2013-01-01 00:00:00’	|--->	de una cuenta diaria de gastos a 1000 euros
		DO UPDATE gastos SET saldo = 1000			|	
		-------------------------------------------------------------------------------------------------------------
		CREATE EVENT e_Borra2012			|	Función que se ejecuta una sola vez y borra todos los
		ON SCHEDULE AT now() + INTERVAL 6 HOUR		|--->	registros del año 2012 dentro de 6 horas
		DO DELETE cuentas WHERE year = 2012		|	
		
Transacciones: se usa cuando se hacen un conjunto de operaciones y queremos asegurarnos de que se hagan todas, si una falla no se hace ninguna
	START TRANSACTION;
	...
	...
	COMMIT;

Funciones útiles:
	last_insert_id(); --> devuelve el último id que se haya insertado en determinada tabla
	